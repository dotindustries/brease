// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: expr.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConditionType int32

const (
	ConditionType_NoCondition       ConditionType = 0
	ConditionType_Empty             ConditionType = 499
	ConditionType_HasValue          ConditionType = 500
	ConditionType_Equals            ConditionType = 501
	ConditionType_DoesNotEqual      ConditionType = 502
	ConditionType_HasPrefix         ConditionType = 503
	ConditionType_DoesNotHavePrefix ConditionType = 504
	ConditionType_HasSuffix         ConditionType = 505
	ConditionType_DoesNotHaveSuffix ConditionType = 506
	ConditionType_InList            ConditionType = 507
	ConditionType_NotInList         ConditionType = 508
	ConditionType_Regex             ConditionType = 509
	ConditionType_NotRegex          ConditionType = 510
)

// Enum value maps for ConditionType.
var (
	ConditionType_name = map[int32]string{
		0:   "NoCondition",
		499: "Empty",
		500: "HasValue",
		501: "Equals",
		502: "DoesNotEqual",
		503: "HasPrefix",
		504: "DoesNotHavePrefix",
		505: "HasSuffix",
		506: "DoesNotHaveSuffix",
		507: "InList",
		508: "NotInList",
		509: "Regex",
		510: "NotRegex",
	}
	ConditionType_value = map[string]int32{
		"NoCondition":       0,
		"Empty":             499,
		"HasValue":          500,
		"Equals":            501,
		"DoesNotEqual":      502,
		"HasPrefix":         503,
		"DoesNotHavePrefix": 504,
		"HasSuffix":         505,
		"DoesNotHaveSuffix": 506,
		"InList":            507,
		"NotInList":         508,
		"Regex":             509,
		"NotRegex":          510,
	}
)

func (x ConditionType) Enum() *ConditionType {
	p := new(ConditionType)
	*p = x
	return p
}

func (x ConditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_expr_proto_enumTypes[0].Descriptor()
}

func (ConditionType) Type() protoreflect.EnumType {
	return &file_expr_proto_enumTypes[0]
}

func (x ConditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionType.Descriptor instead.
func (ConditionType) EnumDescriptor() ([]byte, []int) {
	return file_expr_proto_rawDescGZIP(), []int{0}
}

// A condition expression
type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Base:
	//
	//	*Condition_Key
	//	*Condition_Ref
	Base isCondition_Base `protobuf_oneof:"base"`
	// The type of this condition
	Type ConditionType `protobuf:"varint,3,opt,name=type,proto3,enum=brease.ConditionType" json:"type,omitempty"`
	// A condition parameter holds a target value (right hand side) for a comparison
	//
	// Types that are assignable to Parameter:
	//
	//	*Condition_StringValue
	//	*Condition_BoolValue
	//	*Condition_IntValue
	Parameter isCondition_Parameter `protobuf_oneof:"parameter"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_expr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_expr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_expr_proto_rawDescGZIP(), []int{0}
}

func (m *Condition) GetBase() isCondition_Base {
	if m != nil {
		return m.Base
	}
	return nil
}

func (x *Condition) GetKey() string {
	if x, ok := x.GetBase().(*Condition_Key); ok {
		return x.Key
	}
	return ""
}

func (x *Condition) GetRef() string {
	if x, ok := x.GetBase().(*Condition_Ref); ok {
		return x.Ref
	}
	return ""
}

func (x *Condition) GetType() ConditionType {
	if x != nil {
		return x.Type
	}
	return ConditionType_NoCondition
}

func (m *Condition) GetParameter() isCondition_Parameter {
	if m != nil {
		return m.Parameter
	}
	return nil
}

func (x *Condition) GetStringValue() string {
	if x, ok := x.GetParameter().(*Condition_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Condition) GetBoolValue() bool {
	if x, ok := x.GetParameter().(*Condition_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *Condition) GetIntValue() int32 {
	if x, ok := x.GetParameter().(*Condition_IntValue); ok {
		return x.IntValue
	}
	return 0
}

type isCondition_Base interface {
	isCondition_Base()
}

type Condition_Key struct {
	// Holds a direct object key to be used the value extraction
	Key string `protobuf:"bytes,1,opt,name=key,proto3,oneof"`
}

type Condition_Ref struct {
	// A reference to point to third party data to be used as the value for the condition.
	//
	// Data retrieval requires dalí integration.
	// Uses a dref format based on the dalí project: `/$/key=>/~/${dataSource}/${table}/${searchColumn}/${resultColumn}`
	Ref string `protobuf:"bytes,2,opt,name=ref,proto3,oneof"`
}

func (*Condition_Key) isCondition_Base() {}

func (*Condition_Ref) isCondition_Base() {}

type isCondition_Parameter interface {
	isCondition_Parameter()
}

type Condition_StringValue struct {
	StringValue string `protobuf:"bytes,4,opt,name=stringValue,proto3,oneof"`
}

type Condition_BoolValue struct {
	BoolValue bool `protobuf:"varint,5,opt,name=boolValue,proto3,oneof"`
}

type Condition_IntValue struct {
	IntValue int32 `protobuf:"varint,6,opt,name=intValue,proto3,oneof"`
}

func (*Condition_StringValue) isCondition_Parameter() {}

func (*Condition_BoolValue) isCondition_Parameter() {}

func (*Condition_IntValue) isCondition_Parameter() {}

type Conditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions []*Condition `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *Conditions) Reset() {
	*x = Conditions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_expr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conditions) ProtoMessage() {}

func (x *Conditions) ProtoReflect() protoreflect.Message {
	mi := &file_expr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conditions.ProtoReflect.Descriptor instead.
func (*Conditions) Descriptor() ([]byte, []int) {
	return file_expr_proto_rawDescGZIP(), []int{1}
}

func (x *Conditions) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Expr:
	//
	//	*Expression_And
	//	*Expression_Or
	//	*Expression_Condition
	Expr isExpression_Expr `protobuf_oneof:"expr"`
}

func (x *Expression) Reset() {
	*x = Expression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_expr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

func (x *Expression) ProtoReflect() protoreflect.Message {
	mi := &file_expr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_expr_proto_rawDescGZIP(), []int{2}
}

func (m *Expression) GetExpr() isExpression_Expr {
	if m != nil {
		return m.Expr
	}
	return nil
}

func (x *Expression) GetAnd() *And {
	if x, ok := x.GetExpr().(*Expression_And); ok {
		return x.And
	}
	return nil
}

func (x *Expression) GetOr() *Or {
	if x, ok := x.GetExpr().(*Expression_Or); ok {
		return x.Or
	}
	return nil
}

func (x *Expression) GetCondition() *Condition {
	if x, ok := x.GetExpr().(*Expression_Condition); ok {
		return x.Condition
	}
	return nil
}

type isExpression_Expr interface {
	isExpression_Expr()
}

type Expression_And struct {
	And *And `protobuf:"bytes,1,opt,name=and,proto3,oneof"`
}

type Expression_Or struct {
	Or *Or `protobuf:"bytes,2,opt,name=or,proto3,oneof"`
}

type Expression_Condition struct {
	Condition *Condition `protobuf:"bytes,3,opt,name=condition,proto3,oneof"`
}

func (*Expression_And) isExpression_Expr() {}

func (*Expression_Or) isExpression_Expr() {}

func (*Expression_Condition) isExpression_Expr() {}

type And struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression []*Expression `protobuf:"bytes,1,rep,name=expression,proto3" json:"expression,omitempty"`
}

func (x *And) Reset() {
	*x = And{}
	if protoimpl.UnsafeEnabled {
		mi := &file_expr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *And) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*And) ProtoMessage() {}

func (x *And) ProtoReflect() protoreflect.Message {
	mi := &file_expr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use And.ProtoReflect.Descriptor instead.
func (*And) Descriptor() ([]byte, []int) {
	return file_expr_proto_rawDescGZIP(), []int{3}
}

func (x *And) GetExpression() []*Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

type Or struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression []*Expression `protobuf:"bytes,1,rep,name=expression,proto3" json:"expression,omitempty"`
}

func (x *Or) Reset() {
	*x = Or{}
	if protoimpl.UnsafeEnabled {
		mi := &file_expr_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Or) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Or) ProtoMessage() {}

func (x *Or) ProtoReflect() protoreflect.Message {
	mi := &file_expr_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Or.ProtoReflect.Descriptor instead.
func (*Or) Descriptor() ([]byte, []int) {
	return file_expr_proto_rawDescGZIP(), []int{4}
}

func (x *Or) GetExpression() []*Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

var File_expr_proto protoreflect.FileDescriptor

var file_expr_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x62, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x22, 0xd5, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x72, 0x65, 0x61, 0x73,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x62, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x09,
	0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0x3f, 0x0a, 0x0a,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x62, 0x72, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x86, 0x01,
	0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x03,
	0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x62, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x2e, 0x41, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x0a,
	0x02, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x62, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x2e, 0x4f, 0x72, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x62, 0x72, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06,
	0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x39, 0x0a, 0x03, 0x41, 0x6e, 0x64, 0x12, 0x32, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x62, 0x72, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x38, 0x0a, 0x02, 0x4f, 0x72, 0x12, 0x32, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2a, 0xe3, 0x01, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a,
	0x0b, 0x4e, 0x6f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0xf3, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x48, 0x61,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0xf4, 0x03, 0x12, 0x0b, 0x0a, 0x06, 0x45, 0x71, 0x75,
	0x61, 0x6c, 0x73, 0x10, 0xf5, 0x03, 0x12, 0x11, 0x0a, 0x0c, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f,
	0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0xf6, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x48, 0x61, 0x73,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x10, 0xf7, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x44, 0x6f, 0x65,
	0x73, 0x4e, 0x6f, 0x74, 0x48, 0x61, 0x76, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x10, 0xf8,
	0x03, 0x12, 0x0e, 0x0a, 0x09, 0x48, 0x61, 0x73, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x10, 0xf9,
	0x03, 0x12, 0x16, 0x0a, 0x11, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x48, 0x61, 0x76, 0x65,
	0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x10, 0xfa, 0x03, 0x12, 0x0b, 0x0a, 0x06, 0x49, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x10, 0xfb, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x10, 0xfc, 0x03, 0x12, 0x0a, 0x0a, 0x05, 0x52, 0x65, 0x67, 0x65, 0x78, 0x10,
	0xfd, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x67, 0x65, 0x78, 0x10, 0xfe,
	0x03, 0x42, 0x1d, 0x5a, 0x1b, 0x67, 0x6f, 0x2e, 0x64, 0x6f, 0x74, 0x2e, 0x69, 0x6e, 0x64, 0x75,
	0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x62, 0x72, 0x65, 0x61, 0x73, 0x65, 0x3b, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_expr_proto_rawDescOnce sync.Once
	file_expr_proto_rawDescData = file_expr_proto_rawDesc
)

func file_expr_proto_rawDescGZIP() []byte {
	file_expr_proto_rawDescOnce.Do(func() {
		file_expr_proto_rawDescData = protoimpl.X.CompressGZIP(file_expr_proto_rawDescData)
	})
	return file_expr_proto_rawDescData
}

var file_expr_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_expr_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_expr_proto_goTypes = []interface{}{
	(ConditionType)(0), // 0: brease.ConditionType
	(*Condition)(nil),  // 1: brease.Condition
	(*Conditions)(nil), // 2: brease.Conditions
	(*Expression)(nil), // 3: brease.Expression
	(*And)(nil),        // 4: brease.And
	(*Or)(nil),         // 5: brease.Or
}
var file_expr_proto_depIdxs = []int32{
	0, // 0: brease.Condition.type:type_name -> brease.ConditionType
	1, // 1: brease.Conditions.conditions:type_name -> brease.Condition
	4, // 2: brease.Expression.and:type_name -> brease.And
	5, // 3: brease.Expression.or:type_name -> brease.Or
	1, // 4: brease.Expression.condition:type_name -> brease.Condition
	3, // 5: brease.And.expression:type_name -> brease.Expression
	3, // 6: brease.Or.expression:type_name -> brease.Expression
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_expr_proto_init() }
func file_expr_proto_init() {
	if File_expr_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_expr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_expr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conditions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_expr_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_expr_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*And); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_expr_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Or); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_expr_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Condition_Key)(nil),
		(*Condition_Ref)(nil),
		(*Condition_StringValue)(nil),
		(*Condition_BoolValue)(nil),
		(*Condition_IntValue)(nil),
	}
	file_expr_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Expression_And)(nil),
		(*Expression_Or)(nil),
		(*Expression_Condition)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_expr_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_expr_proto_goTypes,
		DependencyIndexes: file_expr_proto_depIdxs,
		EnumInfos:         file_expr_proto_enumTypes,
		MessageInfos:      file_expr_proto_msgTypes,
	}.Build()
	File_expr_proto = out.File
	file_expr_proto_rawDesc = nil
	file_expr_proto_goTypes = nil
	file_expr_proto_depIdxs = nil
}
