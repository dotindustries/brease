syntax = "proto3";

import "google/api/annotations.proto";
import "gnostic/openapi/v3/annotations.proto";

import "google/protobuf/empty.proto";
import "brease/auth/v1/models.proto";

package brease.auth.v1;

service AuthService {
  // GetToken
  //
  // {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
  // It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
  // It is used to generate a short lived access token for web access.
  //
  // {{import "tables.md"}}
  rpc GetToken(google.protobuf.Empty) returns (TokenPair) {
    option (google.api.http) = {
      post: "/v1/auth/token"
      body: "*"
    };
    option(gnostic.openapi.v3.operation) = {
      security: [
        {
          additional_properties: [
            {
              name: "ApiKeyAuth";
              value: {
                value: []
              }
            }
          ]
        }
      ]
    };
  }
  // Refresh the short lived access token for web access
  rpc RefreshToken(RefreshTokenRequest) returns (TokenPair) {
    option (google.api.http) = {
      post: "/v1/auth/refreshToken"
      body: "*"
    };
  }

  rpc AddCredit(AddCreditRequest) returns (AddCreditRequest) {
    option (google.api.http) = {
      post: "/v1/auth/addCredit"
      body: "*"
    };
  }
}